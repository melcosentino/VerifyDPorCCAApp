# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'DPorCCA.ui'
# Created by: PyQt5 UI code generator 5.15.0
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import tkinter as tk
import pandas as pd
pd.options.plotting.backend = "plotly"
import numpy as np
import matplotlib.pyplot as plt
import warnings
import pyqtgraph as pg
import os
import soundfile
from scipy import signal
from PyQt5 import QtCore, QtGui
from PyQt5 import QtWidgets
from datetime import datetime, timedelta
from tkinter import filedialog

warnings.filterwarnings("ignore", category=RuntimeWarning)
pd.options.mode.chained_assignment = None

# import PAMGuardFunc
# TODO import Clea's algorithms
# import PyHydrophones # need to install first

global BrowseSelectedFolder, CTInfo, CTTemp, NHyd, CP, SelectedFolder, topLevelFolderMetrics
global thisFolder, sset, srise, fs, VerifyCT

"""
Creates pop up windows 
"""


class WinTable(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.title = ''
        self.top = 100
        self.left = 100
        self.width = 360
        self.height = 500
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)


"""
The main tab includes 3 axes to visualise the amplitude, repetition rates, and 
frequency variations within click trains 
"""


def SaveUpdates():
    global SelectedFolder
    FullName = 'C:/Mel/TempWORK/CPODvsDPorCCA/NewFiles/VerifyCTs.csv'
    CTInfo.to_csv(FullName)


class Ui_MainWindow(object):
    def __init__(self):
        # Main Display
        self.MainDisplayTab = QtWidgets.QWidget()
        self.DisplaySettings = QtWidgets.QFrame(self.MainDisplayTab)
        self.AxesPan = QtWidgets.QFrame(self.MainDisplayTab)

        # Validate pan
        self.ActionPan = QtWidgets.QFrame(self.MainDisplayTab)
        self.DisplayAllNBHF = QtWidgets.QFrame(self.ActionPan)
        self.ActionLabel = QtWidgets.QLabel(self.ActionPan)
        # Validate
       # self.CT3DPan = QtWidgets.QFrame(self.ActionPan)
        self.SpectrogramButton = QtWidgets.QPushButton(self.ActionPan)
        self.WrongButton = QtWidgets.QPushButton(self.ActionPan)
        self.UploadValData = QtWidgets.QPushButton(self.ActionPan)
       # self.CTin3D = QtWidgets.QPushButton(self.CT3DPan)

        # Axes
        self.AmpAxesCT = pg.PlotWidget(self.AxesPan)
        self.ICIAxesCT = pg.PlotWidget(self.AxesPan)  # used to be QGraphicsView
        self.FreqAxesCT = pg.PlotWidget(self.AxesPan)
        self.AmpAxesCT.setBackground(background='w')
        self.ICIAxesCT.setBackground(background='w')
        self.FreqAxesCT.setBackground(background='w')
        self.AmpAxesCT.showAxis('bottom', show=False)
        self.ICIAxesCT.showAxis('bottom', show=False)
        self.AmplitudeDB = QtWidgets.QLabel(self.AxesPan)

        self.FreqPan = QtWidgets.QFrame(self.AxesPan)
        self.DirectionofarrivalButton = QtWidgets.QRadioButton(self.FreqPan)
        self.CentroidfrequencykHzButton = QtWidgets.QRadioButton(self.FreqPan)
        self.ICIPan = QtWidgets.QFrame(self.AxesPan)
        self.ClickspersecondButton = QtWidgets.QRadioButton(self.ICIPan)
        self.InterclickintervalmsButton = QtWidgets.QRadioButton(self.ICIPan)

        self.SaveupdatesButton = QtWidgets.QPushButton(self.DisplaySettings)

        self.CTPan = QtWidgets.QFrame(self.DisplaySettings)
        self.CTTypeLabel = QtWidgets.QLabel(self.CTPan)
        self.CTLabel = QtWidgets.QLabel(self.CTPan)
        self.LengthPan = QtWidgets.QFrame(self.DisplaySettings)
        self.LengthLabel = QtWidgets.QLabel(self.LengthPan)
        self.LengthText = QtWidgets.QLabel(self.LengthPan)
        self.CorrPan = QtWidgets.QFrame(self.DisplaySettings)
        self.CorrLabel = QtWidgets.QLabel(self.CorrPan)
        self.CorrText = QtWidgets.QLabel(self.CorrPan)
        self.CTInfoPan = QtWidgets.QFrame(self.DisplaySettings)
        self.TotalLabel = QtWidgets.QLabel(self.CTInfoPan)
        self.CTForw = QtWidgets.QPushButton(self.CTInfoPan)
        self.CTNumD = QtWidgets.QLineEdit(self.CTInfoPan)
        self.CTNumD.setStyleSheet("QLineEdit{background: white}")
        self.CTBack = QtWidgets.QPushButton(self.CTInfoPan)
        self.CTNumLabel = QtWidgets.QLabel(self.CTInfoPan)
        self.DatePan = QtWidgets.QFrame(self.DisplaySettings)
        self.DateandtimeofCTLabel = QtWidgets.QLabel(self.DatePan)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.MainTab = QtWidgets.QTabWidget(self.centralwidget)
        self.DayPan = QtWidgets.QFrame(self.DisplaySettings)
        self.DayLabel = QtWidgets.QLabel(self.DayPan)
        self.DayNightTextLabel = QtWidgets.QLabel(self.DayPan)
        self.DateLabel = QtWidgets.QLabel(self.DatePan)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1500, 950)
        MainWindow.setMinimumSize(QtCore.QSize(1500, 950))
        MainWindow.setMaximumSize(QtCore.QSize(1500, 950))

        ###########################################################
        # MAIN TABS
        ###########################################################
        self.centralwidget.setObjectName("centralwidget")
        self.MainTab.setGeometry(QtCore.QRect(40, 30, 1480, 900))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MainTab.sizePolicy().hasHeightForWidth())
        self.MainTab.setSizePolicy(sizePolicy)
        self.MainTab.setMinimumSize(QtCore.QSize(1400, 900))
        self.MainTab.setMaximumSize(QtCore.QSize(1400, 900))
        self.MainTab.setStyleSheet("background-color: rgb(240, 240, 238)")
        self.MainTab.setObjectName("MainTab")
        self.MainDisplayTab.setObjectName("MainDisplayTab")
        ####################
        # DISPLAY PARAMETERS
        ####################
        self.DisplaySettings.setGeometry(QtCore.QRect(10, 15, 1370, 122))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DisplaySettings.sizePolicy().hasHeightForWidth())
        self.DisplaySettings.setSizePolicy(sizePolicy)
        self.DisplaySettings.setFrameShape(QtWidgets.QFrame.Box)
        self.DisplaySettings.setFrameShadow(QtWidgets.QFrame.Raised)
        self.DisplaySettings.setObjectName("DisplaySettings")
        # Date area
        self.DatePan.setGeometry(QtCore.QRect(10, 8, 250, 106))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DatePan.sizePolicy().hasHeightForWidth())
        self.DatePan.setSizePolicy(sizePolicy)
        self.DatePan.setFrameShape(QtWidgets.QFrame.Box)
        self.DatePan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.DatePan.setObjectName("DatePan")
        self.DateandtimeofCTLabel.setGeometry(QtCore.QRect(20, 60, 200, 30))
        self.DateandtimeofCTLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.DateandtimeofCTLabel.setObjectName("DateandtimeofCTLabel")
        self.DateLabel.setGeometry(QtCore.QRect(100, 20, 50, 30))
        self.DateLabel.setTextFormat(QtCore.Qt.RichText)
        self.DateLabel.setObjectName("DateLabel")
        # Day / Night area
        self.DayPan.setGeometry(QtCore.QRect(270, 8, 120, 106))
        self.DayPan.setFrameShape(QtWidgets.QFrame.Box)
        self.DayPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.DayPan.setObjectName("DayPan")
        self.DayNightTextLabel.setGeometry(QtCore.QRect(20, 20, 90, 30))
        self.DayNightTextLabel.setTextFormat(QtCore.Qt.RichText)
        self.DayNightTextLabel.setObjectName("DayNightTextLabel")
        self.DayLabel.setGeometry(QtCore.QRect(30, 60, 40, 30))
        self.DayLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.DayLabel.setObjectName("DayLabel")
        # CT Info area
        self.CTInfoPan.setGeometry(QtCore.QRect(400, 8, 340, 106))
        self.CTInfoPan.setFrameShape(QtWidgets.QFrame.Box)
        self.CTInfoPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.CTInfoPan.setObjectName("CTInfoPan")
        self.CTNumLabel.setGeometry(QtCore.QRect(60, 20, 250, 30))
        self.CTNumLabel.setTextFormat(QtCore.Qt.RichText)
        self.CTNumLabel.setObjectName("CTNumLabel")
        self.CTBack.setGeometry(QtCore.QRect(30, 60, 40, 30))
        self.CTBack.setObjectName("CTBack")
        self.CTBack.clicked.connect(self.ct_back)
        self.CTNumD.setGeometry(QtCore.QRect(73, 60, 80, 30))
        self.CTNumD.setObjectName("CTNumD")
        self.CTForw.setGeometry(QtCore.QRect(156, 60, 40, 30))
        self.CTForw.setObjectName("CTForw")
        self.CTForw.clicked.connect(self.ct_forward)
        self.TotalLabel.setGeometry(QtCore.QRect(210, 60, 100, 30))
        self.TotalLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.TotalLabel.setObjectName("TotalLabel")
        # Length area
        self.LengthPan.setGeometry(QtCore.QRect(750, 8, 90, 106))
        self.LengthPan.setFrameShape(QtWidgets.QFrame.Box)
        self.LengthPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.LengthPan.setObjectName("LengthPan")
        self.LengthText.setGeometry(QtCore.QRect(10, 20, 60, 30))
        self.LengthText.setTextFormat(QtCore.Qt.RichText)
        self.LengthText.setAlignment(QtCore.Qt.AlignCenter)
        self.LengthText.setObjectName("LengthText")
        self.LengthLabel.setGeometry(QtCore.QRect(20, 60, 50, 30))
        self.LengthLabel.setTextFormat(QtCore.Qt.PlainText)
        self.LengthLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.LengthLabel.setObjectName("LengthLabel")
        # CT Type area
        self.CTPan.setGeometry(QtCore.QRect(850, 8, 150, 106))
        self.CTPan.setFrameShape(QtWidgets.QFrame.Box)
        self.CTPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.CTPan.setObjectName("CTPan")
        self.CTLabel.setGeometry(QtCore.QRect(40, 20, 100, 30))
        self.CTLabel.setTextFormat(QtCore.Qt.RichText)
        self.CTLabel.setObjectName("CTLabel")
        self.CTTypeLabel.setGeometry(QtCore.QRect(20, 60, 100, 30))
        self.CTTypeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.CTTypeLabel.setObjectName("CTTypeLabel")
        # Correction section
        self.CorrPan.setGeometry(QtCore.QRect(1010, 8, 150, 106))
        self.CorrPan.setFrameShape(QtWidgets.QFrame.Box)
        self.CorrPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.CorrPan.setObjectName("CorrPan")
        self.CorrLabel.setGeometry(QtCore.QRect(40, 20, 100, 30))
        self.CorrLabel.setTextFormat(QtCore.Qt.RichText)
        self.CorrLabel.setObjectName("CorrLabel")
        self.CorrText.setGeometry(QtCore.QRect(20, 60, 100, 30))
        self.CorrText.setAlignment(QtCore.Qt.AlignCenter)
        self.CorrText.setObjectName("CorrText")

        # Save button
        self.SaveupdatesButton.setGeometry(QtCore.QRect(1170, 8, 180, 106))
        self.SaveupdatesButton.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.SaveupdatesButton.setAutoDefault(False)
        self.SaveupdatesButton.setDefault(False)
        self.SaveupdatesButton.setFlat(False)
        self.SaveupdatesButton.setObjectName("SaveupdatesButton")
        self.SaveupdatesButton.clicked.connect(SaveUpdates)
        ##################
        ## AXES AREA
        ##################
        pg.setConfigOption('background', 'w')
        self.AxesPan.setGeometry(QtCore.QRect(10, 150, 1000, 700))
        self.AxesPan.setFrameShape(QtWidgets.QFrame.Box)
        self.AxesPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.AxesPan.setObjectName("AxesPan")
        # AMPLITUDE
        self.AmplitudeDB.setGeometry(QtCore.QRect(450, 7, 300, 20))
        self.AmplitudeDB.setObjectName("AmplitudeDB")
        # Axes to plot STEM
        self.AmpAxesCT.setGeometry(QtCore.QRect(20, 35, 960, 192))
        self.AmpAxesCT.setObjectName("AmpAxesCT")
        # ICI / CPS
        self.ICIAxesCT.setGeometry(QtCore.QRect(20, 239, 960, 214))
        self.ICIAxesCT.setObjectName("ICIAxesCT")
        self.ICIPan.setGeometry(QtCore.QRect(300, 214, 650, 42))
        self.ICIPan.setFrameShape(QtWidgets.QFrame.Box)
        self.ICIPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.ICIPan.setObjectName("ICIPan")
        # CPS radio button
        self.ClickspersecondButton.setGeometry(QtCore.QRect(50, 10, 200, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.ClickspersecondButton.setFont(font)
        self.ClickspersecondButton.setObjectName("ClickspersecondButton")
        self.ClickspersecondButton.setChecked(True)
        # ICI radio button
        self.InterclickintervalmsButton.setGeometry(QtCore.QRect(250, 10, 200, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.InterclickintervalmsButton.setFont(font)
        self.InterclickintervalmsButton.setObjectName("InterclickintervalmsButton")
        # FREQUENCY / BEARING
        self.FreqAxesCT.setGeometry(QtCore.QRect(20, 464, 960, 210))
        self.FreqAxesCT.setObjectName("FreqAxesCT")
        self.FreqPan.setGeometry(QtCore.QRect(300, 434, 650, 42))
        self.FreqPan.setFrameShape(QtWidgets.QFrame.Box)
        self.FreqPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.FreqPan.setObjectName("FreqPan")
        # Frequency radio button
        self.CentroidfrequencykHzButton.setGeometry(QtCore.QRect(50, 10, 200, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.CentroidfrequencykHzButton.setFont(font)
        self.CentroidfrequencykHzButton.setObjectName("CentroidfrequencykHzButton")
        self.CentroidfrequencykHzButton.setChecked(True)
        # Bearing radio button
        self.DirectionofarrivalButton.setGeometry(QtCore.QRect(250, 10, 200, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.DirectionofarrivalButton.setFont(font)
        self.DirectionofarrivalButton.setObjectName("DirectionofarrivalButton")
        ######################
        ## ACTION AREA
        ######################
        self.ActionPan.setGeometry(QtCore.QRect(1020, 150, 360, 700))
        self.ActionPan.setFrameShape(QtWidgets.QFrame.Box)
        self.ActionPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.ActionPan.setObjectName("ActionPan")
        self.ActionLabel.setGeometry(QtCore.QRect(20, 20, 250, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.ActionLabel.setFont(font)
        self.ActionLabel.setObjectName("ActionLabel")

        # Browse button
        self.SelectLabel = QtWidgets.QLabel(self.ActionPan)
        self.SelectLabel.setGeometry(20, 60, 150, 20)
        self.SelectLabel.setText('Select a folder')
        self.FolderPathDet = QtWidgets.QLineEdit(self.ActionPan)
        self.FolderPathDet.setGeometry(20, 100, 320, 30)
        self.FolderPathDet.setText("C:/")
        # Browse button
        self.BrowseDet = QtWidgets.QPushButton(self.ActionPan)
        self.BrowseDet.setGeometry(240, 135, 100, 30)
        self.BrowseDet.setText("Browse")
        self.BrowseDet.clicked.connect(self.BrowseButtonDet)
        self.UploadValData.setGeometry(QtCore.QRect(20, 180, 320, 40))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)

        # Individual click trains
        # self.CT3DPan.setGeometry(QtCore.QRect(20, 250, 320, 310))
        # self.CT3DPan.setFrameShape(QtWidgets.QFrame.Box)
        # self.CT3DPan.setFrameShadow(QtWidgets.QFrame.Raised)
        # self.CT3DPan.setObjectName("CT3DPan")

        # Click train in 3D
        self.UploadValData.setFont(font)
        self.UploadValData.setObjectName("UploadValData")
        self.UploadValData.clicked.connect(self.upload_data)
        self.SpectrogramButton.setGeometry(QtCore.QRect(20, 260, 320, 60))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        # Spectrogram area
        self.SpectrogramButton.setFont(font)
        self.SpectrogramButton.setObjectName("SpectrogramButton")
        self.SpectrogramButton.clicked.connect(self.CreateSpectrogram)

        self.WrongButton.setGeometry(QtCore.QRect(20, 340, 320, 60))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        # Spectrogram area
        self.WrongButton.setFont(font)
        self.WrongButton.setObjectName("WrongButton")
        self.WrongButton.clicked.connect(self.PutWrong)

        # self.CTin3D.setGeometry(QtCore.QRect(10, 180, 200, 60))
        # font = QtGui.QFont()
        # font.setBold(False)
        # font.setWeight(50)
        # # Spectrogram area
        # self.CTin3D.setFont(font)
        # self.CTin3D.setObjectName("CTin3D")
        # #        self.CTin3D.clicked.connect(self.SeeCTin3D)

        self.MainTab.addTab(self.MainDisplayTab, "")

        ########################################################
        # METRICS DISPLAY
        #######################################################
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.MainTab.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    ##############################################################
    ###############          FUNCTIONS          ###################

    ###### Translate ##########
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Validation app"))
        self.DateandtimeofCTLabel.setText(_translate("MainWindow", "12 Aug 2015, 12.35.32"))
        self.DayNightTextLabel.setText(_translate("MainWindow",
                                                  "<html><head/><body><p><span style=\" "
                                                  "font-weight:600\">Day/Night</span></p></body></html>"))
        self.DayLabel.setText(_translate("MainWindow", "Day"))
        self.CTNumLabel.setText(_translate("MainWindow",
                                           "<html><head/><body><p><span style=\" font-weight:600\">Click train number "
                                           "(Total)</span></p></body></html>"))
        self.CTForw.setText(_translate("MainWindow", ">"))
        self.CTBack.setText(_translate("MainWindow", "<"))
        self.TotalLabel.setText(_translate("MainWindow", "()"))
        self.CorrLabel.setText(_translate("MainWindow",
                                          "<html><head/><body><p><span style=\" "
                                          "font-weight:600\">Correct</span></p></body></html>"))
        self.LengthText.setText(_translate("MainWindow",
                                           "<html><head/><body><p><span style=\" "
                                           "font-weight:600\">Length</span></p></body></html>"))
        self.LengthLabel.setText(_translate("MainWindow", "20"))
        self.SaveupdatesButton.setText(_translate("MainWindow", " Save \n"
                                                                "updates"))
        self.CTLabel.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-weight:600\">CT "
                                        "Type</span></p></body></html>"))
        self.CTTypeLabel.setText(_translate("MainWindow", "NBHF"))
        self.CorrText.setText(_translate("MainWindow", "1"))
        self.DateLabel.setText(_translate("MainWindow",
                                          "<html><head/><body><p><span style=\" "
                                          "font-weight:600\">Date</span></p></body></html>"))
        self.ActionLabel.setText(_translate("MainWindow", "ACTIONS - CLICK TRAINS"))
        self.UploadValData.setText(_translate("MainWindow", "Upload validation data"))
        self.SpectrogramButton.setText(_translate("MainWindow", "Spectrogram"))
        self.WrongButton.setText(_translate("MainWindow", "Wrong (puts a 0)"))
#        self.CTin3D.setText(_translate("MainWindow", "See CT in 3D"))
        self.AmplitudeDB.setText(_translate("MainWindow",
                                            "<html><head/><body><p><span style=\" font-weight:600\">Amplitude ("
                                            "dB re: 1uPa)</span></p></body></html>"))
        self.InterclickintervalmsButton.setText(_translate("MainWindow", "Inter-click interval"))
        self.ClickspersecondButton.setText(_translate("MainWindow", "Clicks per second"))
        self.CentroidfrequencykHzButton.setText(_translate("MainWindow", "Centroid Frequency"))
        self.DirectionofarrivalButton.setText(_translate("MainWindow", "Direction of arrival"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.MainDisplayTab), _translate("MainWindow", "Main Display"))

    """
    Display buttons
    """

    def ct_back(self):
        num_ct = int(self.CTNumD.text())
        first = CTInfo['NewCT'].iloc[0]
        if num_ct > first:
            self.AmpAxesCT.clear()
            self.ICIAxesCT.clear()
            self.FreqAxesCT.clear()
            row_ct = CTInfo[CTInfo.NewCT == num_ct].index[0]
            num_ct = CTInfo.NewCT[row_ct - 1]
            self.update_ct(num_ct, CP, CTInfo)

    def ct_forward(self):
        num_ct = int(self.CTNumD.text())
        tot = CTInfo['NewCT'].iloc[-1]
        if num_ct == tot:
            print(num_ct, tot)  # do nothing
        elif num_ct < tot:
            self.AmpAxesCT.clear()
            self.ICIAxesCT.clear()
            self.FreqAxesCT.clear()
            row_ct = CTInfo[CTInfo.NewCT == num_ct].index[0]
            num_ct = CTInfo.NewCT[row_ct + 1]
            self.update_ct(num_ct, CP, CTInfo)

    def update_ct(self, num_ct, CP, CTInfo):
        # print(CTInfo)
        global CTTemp
        CTTemp = CP[CP.NewCT == num_ct]
        CTTemp.reset_index(inplace=True)
        print(CTTemp)
        fs = 1 / (CTTemp.iloc[3]['ICI'] / (1000 * (CTTemp.iloc[3]["start_sample"] - CTTemp.iloc[2]["start_sample"])))
        CTTemp = self.NewICI(CTTemp, fs)
        CTTemp.loc[:, 'SumMs'] = int(0)
        for i in range(1, len(CTTemp)):
            CTTemp.SumMs[i] = int(CTTemp.SumMs[i - 1]) + int(CTTemp.ICI[i])
        CTTemp.SumMs = CTTemp.SumMs / 1000
        CT1HQ = CTTemp[CTTemp['pyPorCC'] == 1]
        CT1LQ = CTTemp[CTTemp['pyPorCC'] == 2]
        self.CTNumD.setText(str(num_ct))
        self.CTTypeLabel.setText(str(CTInfo.Species[CTInfo.NewCT == num_ct].values[0]))
        self.DateandtimeofCTLabel.setText(str(CTInfo.Date[CTInfo.NewCT == num_ct].values[0]))
        self.LengthLabel.setText(str(len(CTTemp)))
        self.TotalLabel.setText('(' + str(CTInfo['NewCT'].iloc[-1]) + ')')
        self.CorrText.setText(str(CTInfo.Corr[CTInfo.NewCT == num_ct].values[0]))

        self.AmpAxesCT.clear()
        # TODO set the max and min in all axis (think of SoundTrap data)
        WidthBar = max(CTTemp.SumMs) / 500
        AmpLinesLQ = pg.BarGraphItem(x=CT1LQ.SumMs, height=CT1LQ.amplitude, brush='b', width=WidthBar)
        AmpLinesHQ = pg.BarGraphItem(x=CT1HQ.SumMs, height=CT1HQ.amplitude, brush='r', width=WidthBar)
        AmpDotsLQ = pg.ScatterPlotItem(x=CT1LQ.SumMs, y=CT1LQ.amplitude, symbol='o', brush='b', width=0.2)
        AmpDotsHQ = pg.ScatterPlotItem(x=CT1HQ.SumMs, y=CT1HQ.amplitude, symbol='o', brush='r', width=0.2)
        self.AmpAxesCT.addItem(AmpLinesLQ)
        self.AmpAxesCT.addItem(AmpDotsLQ)
        self.AmpAxesCT.addItem(AmpLinesHQ)
        self.AmpAxesCT.addItem(AmpDotsHQ)
        self.AmpAxesCT.setXRange(0, max(CTTemp.SumMs) + 0.1)
        self.AmpAxesCT.setYRange(80, 150)

        # plot click per second (default) or ICI
        ICIorCPS = self.InterclickintervalmsButton.isChecked()

        if ICIorCPS == 1:
            ICILQ = CT1LQ.ICI.to_list()
            ICIHQ = CT1HQ.ICI.to_list()
            ICIDotsLQ = pg.ScatterPlotItem(x=CT1LQ.SumMs, y=ICILQ, symbol='o', brush='b', width=2)
            ICIDotsHQ = pg.ScatterPlotItem(x=CT1HQ.SumMs, y=ICIHQ, symbol='o', brush='r', width=2)
            self.ICIAxesCT.addItem(ICIDotsLQ)
            self.ICIAxesCT.addItem(ICIDotsHQ)
            self.ICIAxesCT.setXRange(0, max(CTTemp.SumMs) + 0.1)
            self.ICIAxesCT.setYRange(0, max(CTTemp.ICI[2:-1]) + 10)
        else:
            # plot clicks per second
            CPSLQ = CT1LQ.CPS.to_list()
            CPSHQ = CT1HQ.CPS.to_list()
            CPSDotsLQ = pg.ScatterPlotItem(x=CT1LQ.SumMs, y=CPSLQ, symbol='o', brush='b', width=2)
            CPSDotsHQ = pg.ScatterPlotItem(x=CT1HQ.SumMs, y=CPSHQ, symbol='o', brush='r', width=2)
            self.ICIAxesCT.addItem(CPSDotsLQ)
            self.ICIAxesCT.addItem(CPSDotsHQ)
            self.ICIAxesCT.setXRange(0, max(CTTemp.SumMs) + 0.1)
            self.ICIAxesCT.setYRange(0, max(CTTemp.CPS[2:-1]) + 30)
        a = 1
        if a == 0:  # If bearing exist
            # TODO identifying if bearing exists and plot
            CTTemp.Bearing = CTTemp.Bearing.to_list()
            self.FreqAxesCT.plot(CTTemp.SumMs, CTTemp.Bearing, pen=None, symbol='o', color='b')
            self.FreqAxesCT.setXRange(0, max(CTTemp.SumMs) + 0.1)
            self.FreqAxesCT.setYRange(0, 180)
        else:
            FreqLQ = CT1LQ.CF / 1000
            FreqHQ = CT1HQ.CF / 1000
            FreqLQ = FreqLQ.to_list()
            FreqHQ = FreqHQ.to_list()
            FreqLinesLQ = pg.BarGraphItem(x=CT1LQ.SumMs, height=FreqLQ, brush='b', width=WidthBar)
            FreqLinesHQ = pg.BarGraphItem(x=CT1HQ.SumMs, height=FreqHQ, brush='r', width=WidthBar)
            FreqDotsLQ = pg.ScatterPlotItem(x=CT1LQ.SumMs, y=FreqLQ, symbol='o', brush='b', width=2)
            FreqDotsHQ = pg.ScatterPlotItem(x=CT1HQ.SumMs, y=FreqHQ, symbol='o', brush='r', width=2)
            self.FreqAxesCT.addItem(FreqLinesLQ)
            self.FreqAxesCT.addItem(FreqDotsLQ)
            self.FreqAxesCT.addItem(FreqLinesHQ)
            self.FreqAxesCT.addItem(FreqDotsHQ)
            self.FreqAxesCT.setXRange(0, max(CTTemp.SumMs) + 0.1)
            self.FreqAxesCT.setYRange(50, 180)
        self.CreateSpectrogram()

    def NewICI(self, myTable, fs):
        StartSample = myTable["start_sample"]
        myTable.ICI = StartSample.diff() / (fs / 1000)
        myTable["CPS"] = 1000 / myTable["ICI"]
        myTable.iloc[0]['CPS'] = 0
        myTable.iloc[0]['ICI'] = 0
        return myTable

    def PutWrong(self):
        self.CorrText.setText('0')
        num_ct = int(self.CTNumD.text())
        row_ct = CTInfo[CTInfo.NewCT == num_ct].index[0]
        CTInfo.Corr[row_ct] = 0

    """
    Buttons 
    """

    def CreateSpectrogram(self):
        global fs, CTTemp, Name
        # Find the file to open
        WavFileToOpen = CTTemp.filename[0]
        s = soundfile.SoundFile(WavFileToOpen)
        TotSamples = s.frames
        Start = CTTemp.start_sample.iloc[0] - 5760
        End = CTTemp.start_sample.iloc[-1] + 5760
        if End > TotSamples:
            End = TotSamples
        if Start < 0:
            Start = 0

        Signal, fs = soundfile.read(WavFileToOpen, start=int(Start), stop=int(End))
        MeanSig = sum(Signal) / len(Signal)
        Signal = Signal - MeanSig
        # Signal = Signal/max(Signal)
        sos = signal.butter(10, 50000, 'hp', fs=fs, output='sos')
        FiltSig = signal.sosfilt(sos, Signal)
        # the signal
        Duration = len(Signal) / fs
        t = np.arange(0.0, Duration, 1 / fs)
        NFFT = 512  # length of the windowing segments

        fig, (ax1, ax2) = plt.subplots(nrows=2)
        ax1.plot(t, FiltSig)
        Pxx, freqs, bins, im = ax2.specgram(FiltSig, NFFT=NFFT, Fs=fs, noverlap=128, cmap='jet')
        plt.show()

    def FromOrdinal(self, x):
        ix = int(x)
        dt = datetime.fromordinal(ix)
        remainder = float(x) - ix
        hour, remainder = divmod(24 * remainder, 1)
        minute, remainder = divmod(60 * remainder, 1)
        second, remainder = divmod(60 * remainder, 1)
        microsecond = int(1e6 * remainder)
        if microsecond < 10:
            microsecond = 0  # compensate for rounding errors
        # for some strange reason it is 1 year over the actual date!!
        dt = datetime(dt.year - 1, dt.month, dt.day, int(hour), int(minute),
                      int(second), microsecond)
        if microsecond > 999990:  # compensate for rounding errors
            dt += timedelta(microseconds=1e6 - microsecond)

        return dt

    def BrowseButtonDet(self):
        root = tk.Tk()
        root.withdraw()
        self.SelectedFolder = filedialog.askdirectory()
        self.FolderPathDet.setText(self.SelectedFolder)

    def upload_data(self):
        global CTInfo, CP
        FilesInFolder = os.listdir(self.SelectedFolder)
        AllFile = [s for s in FilesInFolder if "AllCTrains.csv" in s]
        if len(AllFile) > 0:
            FileName = self.SelectedFolder + '/AllCTrains.csv'
            CP = pd.read_csv(FileName)
            CTInfoFileName = self.SelectedFolder + '/AllCTInfo.csv'
            CTInfo = pd.read_csv(CTInfoFileName)
            CTNum = CTInfo.NewCT[0]
            CTInfo['Corr'] = 0
            self.update_ct(CTNum, CP, CTInfo)
        else:
            AllCTInfo = pd.DataFrame()
            AllCTrains = pd.DataFrame()
            NewCTNum = 0
            FilesAndFolders = os.listdir(self.SelectedFolder)
            Folders = [s for s in FilesAndFolders if not "." in s]
            for SubFolder in Folders:
                print('Processing subfolder', SubFolder)
                ThisCP = pd.read_csv(self.SelectedFolder + '/' + SubFolder + '/CTrains.csv')
                ThisCTInfo = pd.read_csv(self.SelectedFolder + '/' + SubFolder + '/CTInfo.csv')
                CTInfo = ThisCTInfo[ThisCTInfo.Species != 'Non-NBHF']
                CTInfo.reset_index(inplace=True, drop=True)
                CTInfo['NewCT'] = 0
                if len(CTInfo) > 0:
                    CTrains = pd.DataFrame()
                    for i in range(0, len(CTInfo)):
                        NewCTNum = NewCTNum + 1
                        NumCT = CTInfo.CTNum[i]
                        CTInfo.NewCT[i] = NewCTNum
                        CTInfo['Corr'] = 1
                        CTTemp = ThisCP[ThisCP.CT == NumCT]
                        CTTemp.reset_index(inplace=True, drop=True)
                        CTTemp['NewCT'] = NewCTNum
                        print(CTTemp)
                        CTrains = CTrains.append(CTTemp, ignore_index=True)
                        print(CTrains)
                    AllCTInfo.reset_index(inplace=True, drop=True)
                    AllCTrains.reset_index(inplace=True, drop=True)
                    AllCTInfo = AllCTInfo.append(CTInfo, ignore_index=True)
                    AllCTrains = AllCTrains.append(CTrains, ignore_index=True)

                    CTFileName = self.SelectedFolder + '/AllCTrains.csv'
                    AllCTrains.to_csv(CTFileName, index=False)
                    CTInfoFileName = self.SelectedFolder + '/AllCTInfo.csv'
                    AllCTInfo.to_csv(CTInfoFileName, index=False)

            CTInfo = AllCTInfo
            CP = AllCTrains
            num_ct = 1
            self.update_ct(num_ct, CP, CTInfo)
            print('The data is ready to be validated')

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    app.setStyle("fusion")
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
