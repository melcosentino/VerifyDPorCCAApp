# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'DPorCCA.ui'
# Created by: PyQt5 UI code generator 5.15.0
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import tkinter as tk
import pandas as pd
import plotly
import plotly.express as px
import plotly.graph_objs as go
pd.options.plotting.backend = "plotly"
import numpy as np
import matplotlib.pyplot as plt
import warnings
import pyqtgraph as pg
import os
import soundfile
from scipy import signal
from PyQt5 import QtCore, QtWidgets, QtWebEngineWidgets, QtGui
from datetime import datetime, timedelta
from tkinter import filedialog

pd.options.plotting.backend = "plotly"
# Offline mode
# from plotly.offline import init_notebook_mode, iplot
# init_notebook_mode(connected=True)

warnings.filterwarnings("ignore", category=RuntimeWarning)
pd.options.mode.chained_assignment = None

# import PAMGuardFunc
# TODO import Clea's algorithms
# import PyHydrophones # need to install first

global BrowseSelectedFolder, CTInfo, CTTemp, NHyd, CP, SelectedFolder, topLevelFolderMetrics
global thisFolder, sset, srise, fs, VerifyCT

"""
Creates pop up windows 
"""


class WinTable(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.title = ''
        self.top = 100
        self.left = 100
        self.width = 360
        self.height = 500
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)


"""
The main tab includes 3 axes to visualise the amplitude, repetition rates, and 
frequency variations within click trains 
"""


def SaveUpdates():
    global SelectedFolder, AllCTInfo
    FullNameCTInfo = SelectedFolder + '/AllCTInfo.csv'
    AllCTInfo.to_csv(FullNameCTInfo)


class Ui_MainWindow(object):
    def __init__(self):
        # Main Display
        self.MainDisplayTab = QtWidgets.QWidget()
        self.DisplaySettings = QtWidgets.QFrame(self.MainDisplayTab)
        self.AxesPan = QtWidgets.QFrame(self.MainDisplayTab)
        self.ActionPan = QtWidgets.QFrame(self.MainDisplayTab)
        left_widget = QtWidgets.QWidget(self.AxesPan)
        left_widget.setGeometry(5, 5, 800, 700)

        # Axes
        self.AmpAxesCT = QtWebEngineWidgets.QWebEngineView()
        self.ICIAxesCT = QtWebEngineWidgets.QWebEngineView()  # used to be QGraphicsView
        self.FreqAxesCT = QtWebEngineWidgets.QWebEngineView()
        self.layout = QtWidgets.QVBoxLayout(left_widget)
        self.layout.addWidget(self.AmpAxesCT)
        self.layout.addWidget(self.ICIAxesCT)
        self.layout.addWidget(self.FreqAxesCT)

        hlay = QtWidgets.QHBoxLayout(self.AxesPan)
        hlay.addWidget(left_widget)

        # Action
        right_widget = QtWidgets.QWidget(self.ActionPan)
        right_widget.setGeometry(5, 5, 800, 700)

        self.WaveAxes = QtWebEngineWidgets.QWebEngineView()
        self.SpectAxes = QtWebEngineWidgets.QWebEngineView()  # used to be QGraphicsView
        self.layoutAct = QtWidgets.QVBoxLayout(right_widget)
        self.layoutAct.addWidget(self.WaveAxes)
        self.layoutAct.addWidget(self.SpectAxes)

        hlay2 = QtWidgets.QHBoxLayout(self.ActionPan)
        hlay2.addWidget(right_widget)


        # Validate pan

        self.ActionLabel = QtWidgets.QLabel(self.ActionPan)
        #  self.WaveAxes = pg.PlotWidget(self.ActionPan)
        # self.SpectAxes = pg.ImageView(self.ActionPan)

        # Validate
        self.WrongButton = QtWidgets.QPushButton(self.DisplaySettings)
        self.RightButton = QtWidgets.QPushButton(self.DisplaySettings)
        self.UploadValData = QtWidgets.QPushButton(self.DisplaySettings)

        self.AmplitudeDB = QtWidgets.QLabel(self.AxesPan)
        self.CPSLbl = QtWidgets.QLabel(self.AxesPan)
        self.FreqLbl = QtWidgets.QLabel(self.AxesPan)

        self.SaveupdatesButton = QtWidgets.QPushButton(self.DisplaySettings)

        self.CTPan = QtWidgets.QFrame(self.DisplaySettings)
        self.CTTypeLabel = QtWidgets.QLabel(self.CTPan)
        self.CTLabel = QtWidgets.QLabel(self.CTPan)
        self.CorrPan = QtWidgets.QFrame(self.DisplaySettings)
        self.CorrLabel = QtWidgets.QLabel(self.CorrPan)
        self.CorrText = QtWidgets.QLabel(self.CorrPan)
        self.CTInfoPan = QtWidgets.QFrame(self.DisplaySettings)
        self.TotalLabel = QtWidgets.QLabel(self.CTInfoPan)
        self.CTForw = QtWidgets.QPushButton(self.CTInfoPan)
        self.CTNumD = QtWidgets.QLineEdit(self.CTInfoPan)
        self.CTNumD.setStyleSheet("QLineEdit{background: white}")
        self.CTBack = QtWidgets.QPushButton(self.CTInfoPan)
        self.CTNumLabel = QtWidgets.QLabel(self.CTInfoPan)
        self.DatePan = QtWidgets.QFrame(self.DisplaySettings)
        self.DateandtimeofCTLabel = QtWidgets.QLabel(self.DatePan)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.MainTab = QtWidgets.QTabWidget(self.centralwidget)
        self.DateLabel = QtWidgets.QLabel(self.DatePan)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1500, 950)
        MainWindow.setMinimumSize(QtCore.QSize(1500, 950))
        MainWindow.setMaximumSize(QtCore.QSize(1500, 950))

        ###########################################################
        # MAIN TABS
        ###########################################################
        self.centralwidget.setObjectName("centralwidget")
        self.MainTab.setGeometry(QtCore.QRect(40, 30, 1480, 900))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MainTab.sizePolicy().hasHeightForWidth())
        self.MainTab.setSizePolicy(sizePolicy)
        self.MainTab.setMinimumSize(QtCore.QSize(1400, 900))
        self.MainTab.setMaximumSize(QtCore.QSize(1400, 900))
        self.MainTab.setStyleSheet("background-color: rgb(240, 240, 238)")
        self.MainTab.setObjectName("MainTab")
        self.MainDisplayTab.setObjectName("MainDisplayTab")
        ####################
        # DISPLAY PARAMETERS
        ####################
        self.DisplaySettings.setGeometry(QtCore.QRect(10, 15, 1370, 122))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DisplaySettings.sizePolicy().hasHeightForWidth())
        self.DisplaySettings.setSizePolicy(sizePolicy)
        self.DisplaySettings.setFrameShape(QtWidgets.QFrame.Box)
        self.DisplaySettings.setFrameShadow(QtWidgets.QFrame.Raised)
        self.DisplaySettings.setObjectName("DisplaySettings")
        # Date area
        self.DatePan.setGeometry(QtCore.QRect(10, 8, 200, 106))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DatePan.sizePolicy().hasHeightForWidth())
        self.DatePan.setSizePolicy(sizePolicy)
        self.DatePan.setFrameShape(QtWidgets.QFrame.Box)
        self.DatePan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.DatePan.setObjectName("DatePan")
        self.DateandtimeofCTLabel.setGeometry(QtCore.QRect(5, 60, 180, 30))
        self.DateandtimeofCTLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.DateandtimeofCTLabel.setObjectName("DateandtimeofCTLabel")
        self.DateLabel.setGeometry(QtCore.QRect(80, 20, 50, 30))
        self.DateLabel.setTextFormat(QtCore.Qt.RichText)
        self.DateLabel.setObjectName("DateLabel")
        # CT Type area
        self.CTPan.setGeometry(QtCore.QRect(220, 8, 100, 106))
        self.CTPan.setFrameShape(QtWidgets.QFrame.Box)
        self.CTPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.CTPan.setObjectName("CTPan")
        self.CTLabel.setGeometry(QtCore.QRect(10, 20, 70, 30))
        self.CTLabel.setTextFormat(QtCore.Qt.RichText)
        self.CTLabel.setObjectName("CTLabel")
        self.CTTypeLabel.setGeometry(QtCore.QRect(5, 60, 80, 30))
        self.CTTypeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.CTTypeLabel.setObjectName("CTTypeLabel")
        # Correction section
        self.CorrPan.setGeometry(QtCore.QRect(330, 8, 90, 106))
        self.CorrPan.setFrameShape(QtWidgets.QFrame.Box)
        self.CorrPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.CorrPan.setObjectName("CorrPan")
        self.CorrLabel.setGeometry(QtCore.QRect(10, 20, 70, 30))
        self.CorrLabel.setTextFormat(QtCore.Qt.RichText)
        self.CorrLabel.setObjectName("CorrLabel")
        self.CorrText.setGeometry(QtCore.QRect(20, 60, 50, 30))
        self.CorrText.setAlignment(QtCore.Qt.AlignCenter)
        self.CorrText.setObjectName("CorrText")
        # CT Info area
        self.CTInfoPan.setGeometry(QtCore.QRect(430, 8, 320, 106))
        self.CTInfoPan.setFrameShape(QtWidgets.QFrame.Box)
        self.CTInfoPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.CTInfoPan.setObjectName("CTInfoPan")
        self.CTNumLabel.setGeometry(QtCore.QRect(60, 20, 250, 30))
        self.CTNumLabel.setTextFormat(QtCore.Qt.RichText)
        self.CTNumLabel.setObjectName("CTNumLabel")
        self.CTBack.setGeometry(QtCore.QRect(30, 60, 40, 30))
        self.CTBack.setObjectName("CTBack")
        self.CTBack.clicked.connect(self.ct_back)
        self.CTNumD.setGeometry(QtCore.QRect(73, 60, 80, 30))
        self.CTNumD.setObjectName("CTNumD")
        self.CTForw.setGeometry(QtCore.QRect(156, 60, 40, 30))
        self.CTForw.setObjectName("CTForw")
        self.CTForw.clicked.connect(self.ct_forward)
        self.TotalLabel.setGeometry(QtCore.QRect(210, 60, 100, 30))
        self.TotalLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.TotalLabel.setObjectName("TotalLabel")

        # Save button
        self.SaveupdatesButton.setGeometry(QtCore.QRect(1265, 8, 95, 106))
        self.SaveupdatesButton.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.SaveupdatesButton.setAutoDefault(False)
        self.SaveupdatesButton.setDefault(False)
        self.SaveupdatesButton.setFlat(False)
        self.SaveupdatesButton.setObjectName("SaveupdatesButton")
        self.SaveupdatesButton.clicked.connect(SaveUpdates)
        ##################
        ## AXES AREA
        ##################
        pg.setConfigOption('background', 'w')
        self.AxesPan.setGeometry(QtCore.QRect(10, 150, 800, 700))
        self.AxesPan.setFrameShape(QtWidgets.QFrame.Box)
        self.AxesPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.AxesPan.setObjectName("AxesPan")
        # AMPLITUDE
        self.AmplitudeDB.setGeometry(QtCore.QRect(300, 7, 250, 20))
        self.AmplitudeDB.setObjectName("AmplitudeDB")
        self.AmplitudeDB.setAlignment(QtCore.Qt.AlignCenter)
        self.CPSLbl.setGeometry(QtCore.QRect(300, 230, 250, 20))
        self.CPSLbl.setObjectName("CPSLbl")
        self.CPSLbl.setAlignment(QtCore.Qt.AlignCenter)
        self.FreqLbl.setGeometry(QtCore.QRect(300, 450, 250, 20))
        self.FreqLbl.setObjectName("FreqLbl")
        self.FreqLbl.setAlignment(QtCore.Qt.AlignCenter)

        self.AmpAxesCT.setObjectName("AmpAxesCT")

        ######################
        ## ACTION AREA
        ######################
        self.ActionPan.setGeometry(QtCore.QRect(820, 150, 560, 700))
        self.ActionPan.setFrameShape(QtWidgets.QFrame.Box)
        self.ActionPan.setFrameShadow(QtWidgets.QFrame.Raised)
        self.ActionPan.setObjectName("ActionPan")
        self.ActionLabel.setGeometry(QtCore.QRect(150, 7, 250, 20))
        self.ActionLabel.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.ActionLabel.setFont(font)
        self.ActionLabel.setObjectName("ActionLabel")

        # Browse button
        self.SelectLabel = QtWidgets.QLabel(self.DisplaySettings)
        self.SelectLabel.setGeometry(820, 8, 150, 20)
        self.SelectLabel.setText('Select a folder')
        self.FolderPathDet = QtWidgets.QLineEdit(self.DisplaySettings)
        self.FolderPathDet.setGeometry(820, 40, 320, 30)
        self.FolderPathDet.setText("C:/")
        # Browse button
        self.BrowseDet = QtWidgets.QPushButton(self.DisplaySettings)
        self.BrowseDet.setGeometry(1040, 82, 100, 30)
        self.BrowseDet.setText("Browse")
        self.BrowseDet.clicked.connect(self.BrowseButtonDet)
        self.UploadValData.setGeometry(QtCore.QRect(1155, 8, 100, 106))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)

        # Click train in 3D
        self.UploadValData.setFont(font)
        self.UploadValData.setObjectName("UploadValData")
        self.UploadValData.clicked.connect(self.upload_data)
        self.WrongButton.setGeometry(QtCore.QRect(760, 8, 40, 48))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        # Spectrogram area
        self.WrongButton.setFont(font)
        self.WrongButton.setObjectName("WrongButton")
        self.WrongButton.clicked.connect(self.PutWrong)

        self.RightButton.setGeometry(QtCore.QRect(760, 65, 40, 48))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        # Spectrogram area
        self.RightButton.setFont(font)
        self.RightButton.setObjectName("RightButton")
        self.RightButton.clicked.connect(self.PutRight)

        self.MainTab.addTab(self.MainDisplayTab, "")

        ########################################################
        # METRICS DISPLAY
        #######################################################
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.MainTab.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    ##############################################################
    ###############          FUNCTIONS          ###################

    ###### Translate ##########
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Validation app"))
        self.DateandtimeofCTLabel.setText(_translate("MainWindow", "12 Aug 2015, 12.35.32"))
        self.CTNumLabel.setText(_translate("MainWindow",
                                           "<html><head/><body><p><span style=\" font-weight:600\">Click train number "
                                           "(Total)</span></p></body></html>"))
        self.CTForw.setText(_translate("MainWindow", ">"))
        self.CTBack.setText(_translate("MainWindow", "<"))
        self.TotalLabel.setText(_translate("MainWindow", "()"))
        self.CorrLabel.setText(_translate("MainWindow",
                                          "<html><head/><body><p><span style=\" "
                                          "font-weight:600\">Correct</span></p></body></html>"))
        self.SaveupdatesButton.setText(_translate("MainWindow", " Save \n"
                                                                "updates"))
        self.CTLabel.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-weight:600\">CT "
                                        "Type</span></p></body></html>"))
        self.CTTypeLabel.setText(_translate("MainWindow", "NBHF"))
        self.CorrText.setText(_translate("MainWindow", "1"))
        self.DateLabel.setText(_translate("MainWindow",
                                          "<html><head/><body><p><span style=\" "
                                          "font-weight:600\">Date</span></p></body></html>"))
        self.ActionLabel.setText(_translate("MainWindow", "Waveform and spectrogram"))
        self.UploadValData.setText(_translate("MainWindow", "Upload \n"
                                                                "data"))
        self.WrongButton.setText(_translate("MainWindow", "X"))
        self.RightButton.setText(_translate("MainWindow", "OK"))
#        self.CTin3D.setText(_translate("MainWindow", "See CT in 3D"))
        self.AmplitudeDB.setText(_translate("MainWindow",
                                            "<html><head/><body><p><span style=\" font-weight:600\">Amplitude ("
                                            "dB re: 1uPa)</span></p></body></html>"))
        self.CPSLbl.setText(_translate("MainWindow",
                                            "<html><head/><body><p><span style=\" font-weight:600\">Clicks per second"
                                            "</span></p></body></html>"))
        self.FreqLbl.setText(_translate("MainWindow",
                                            "<html><head/><body><p><span style=\" font-weight:600\">Centroid frequency ("
                                            "kHz)</span></p></body></html>"))
        # self.InterclickintervalmsButton.setText(_translate("MainWindow", "Inter-click interval"))
        # self.ClickspersecondButton.setText(_translate("MainWindow", "Clicks per second"))
        # self.CentroidfrequencykHzButton.setText(_translate("MainWindow", "Centroid Frequency"))
        # self.DirectionofarrivalButton.setText(_translate("MainWindow", "Direction of arrival"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.MainDisplayTab), _translate("MainWindow", "Main Display"))

    """
    Display buttons
    """

    def ct_back(self):
        num_ct = int(self.CTNumD.text())
        first = CTInfo['NewCT'].iloc[0]
        if num_ct > first:
            row_ct = CTInfo[CTInfo.NewCT == num_ct].index[0]
            num_ct = CTInfo.NewCT[row_ct - 1]
            self.update_ct(num_ct, CP, CTInfo)

    def ct_forward(self):
        num_ct = int(self.CTNumD.text())
        tot = CTInfo['NewCT'].iloc[-1]
        if num_ct == tot:
            print(num_ct, tot)  # do nothing
        elif num_ct < tot:
            row_ct = CTInfo[CTInfo.NewCT == num_ct].index[0]
            num_ct = CTInfo.NewCT[row_ct + 1]
            self.update_ct(num_ct, CP, CTInfo)

    def update_ct(self, num_ct, CP, CTInfo):
        global CTTemp
        CTTemp = CP[CP.NewCT == num_ct]
        CTTemp.reset_index(inplace=True)
        fs = 1 / (CTTemp.iloc[3]['ICI'] / (1000 * (CTTemp.iloc[3]["start_sample"] - CTTemp.iloc[2]["start_sample"])))
        CTTemp = self.NewICI(CTTemp, fs)
        CTTemp.loc[:, 'SumMs'] = int(0)
        for i in range(1, len(CTTemp)):
            CTTemp.SumMs[i] = int(CTTemp.SumMs[i - 1]) + int(CTTemp.ICI[i])
        CTTemp.SumMs = CTTemp.SumMs / 1000
        # Update info in app
        self.CTNumD.setText(str(num_ct))
        self.CTTypeLabel.setText(str(CTInfo.Species[CTInfo.NewCT == num_ct].values[0]))
        self.DateandtimeofCTLabel.setText(str(CTInfo.Date[CTInfo.NewCT == num_ct].values[0]))
        self.TotalLabel.setText('(' + str(CTInfo['NewCT'].iloc[-1]) + ')')
        self.CorrText.setText(str(CTInfo.Corr[CTInfo.NewCT == num_ct].values[0]))

        Amps = px.bar(CTTemp, x="SumMs", y="amplitude", width=750, height=250)
        Amps.update_yaxes(title='')
        Amps.update_xaxes(title='')
        CPSs = px.scatter(CTTemp, x="SumMs", y="CPS", width=750, height=250)
        CPSs.update_yaxes(title='')
        CPSs.update_xaxes(title='')
        Freqs = px.bar(CTTemp, x="SumMs", y="CF", width=750, height=250)
        Freqs.update_yaxes(title='')
        Freqs.update_xaxes(title='')
        self.AmpAxesCT.setHtml(Amps.to_html(include_plotlyjs='cdn'))
        self.ICIAxesCT.setHtml(CPSs.to_html(include_plotlyjs='cdn'))
        self.FreqAxesCT.setHtml(Freqs.to_html(include_plotlyjs='cdn'))
        self.AmpAxesCT.sizeHint()
        self.ICIAxesCT.sizeHint()
        self.FreqAxesCT.sizeHint()

        self.CreateSpectrogram()

    def NewICI(self, myTable, fs):
        StartSample = myTable["start_sample"]
        myTable.ICI = StartSample.diff() / (fs / 1000)
        myTable["CPS"] = 1000 / myTable["ICI"]
        myTable.iloc[0]['CPS'] = 0
        myTable.iloc[0]['ICI'] = 0
        return myTable

    def PutWrong(self):
        self.CorrText.setText('0')
        num_ct = int(self.CTNumD.text())
        row_ct = CTInfo[CTInfo.NewCT == num_ct].index[0]
        CTInfo.Corr[row_ct] = 0

    def PutRight(self):
        self.CorrText.setText('0')
        num_ct = int(self.CTNumD.text())
        row_ct = CTInfo[CTInfo.NewCT == num_ct].index[0]
        CTInfo.Corr[row_ct] = 1

    """
    Buttons 
    """

    def CreateSpectrogram(self):
        global fs, CTTemp, Name
        # Find the file to open
        WavFileToOpen = CTTemp.filename[0]
        s = soundfile.SoundFile(WavFileToOpen)
        TotSamples = s.frames
        Start = CTTemp.start_sample.iloc[0] - 5760
        End = CTTemp.start_sample.iloc[-1] + 5760
        if End > TotSamples:
            End = TotSamples
        if Start < 0:
            Start = 0

        Signal, fs = soundfile.read(WavFileToOpen, start=int(Start), stop=int(End))
        MeanSig = sum(Signal) / len(Signal)
        Signal = Signal - MeanSig
        # Signal = Signal/max(Signal)
        sos = signal.butter(10, 50000, 'hp', fs=fs, output='sos')
        FiltSig = signal.sosfilt(sos, Signal)
        # the signal
        Duration = len(Signal) / fs
        t = np.arange(0.0, Duration, 1 / fs)
        data = pd.DataFrame()
        data['t'] = t[0:5000]
        data['FiltSig'] = FiltSig[0:5000]
        NFFT = 512  # length of the windowing segments
        window = signal.get_window('hann', NFFT)
        Overlap = 128

        Waveform = px.bar(data, x='t', y='FiltSig', width=500, height=300)
        # Spect = px.bar(CTTemp, x="SumMs", y="CF", color="pyPorCC", width=950, height=200)
        self.WaveAxes.setHtml(Waveform.to_html(include_plotlyjs='cdn'))
#        self.SpectAxes.setHtml(Spect.to_html(include_plotlyjs='cdn'))
        self.WaveAxes.sizeHint()
        self.SpectAxes.sizeHint()


        # freq, t, Pxx = signal.spectrogram(FiltSig, fs=fs, nfft=NFFT, window=window, scaling='density',
        #                                   noverlap=Overlap)
        # Pxx = 10*np.log10(Pxx**2)
        # self.SpectAxes.setImage(Pxx.T, autoRange=False, scale=(100, 600))
        #
        #
        # self.ActionPan, (self.WaveAxes, self.SpectAxes) = plt.subplots(nrows=2, sharex=True)
        #
        # # Pxx, freqs, bins, im = plt.specgram(FiltSig, NFFT=NFFT, Fs=fs, noverlap=128, cmap='jet')
        #
        # self.SpectAxes = plt.specgram(FiltSig, NFFT=NFFT, Fs=fs, noverlap=128, cmap='jet')
        # #plt.show()


        # fig, (ax1, ax2) = plt.subplots(nrows=2)
        # ax1.plot(t, FiltSig)
        # Pxx, freqs, bins, im = ax2.specgram(FiltSig, NFFT=NFFT, Fs=fs, window=window, noverlap=Overlap)
        # The `specgram` method returns 4 objects. They are:
        # - Pxx: the periodogram
        # - freqs: the frequency vector
        # - bins: the centers of the time bins
        # - im: the .image.AxesImage instance representing the data in the plot
        # plt.show()

    def FromOrdinal(self, x):
        ix = int(x)
        dt = datetime.fromordinal(ix)
        remainder = float(x) - ix
        hour, remainder = divmod(24 * remainder, 1)
        minute, remainder = divmod(60 * remainder, 1)
        second, remainder = divmod(60 * remainder, 1)
        microsecond = int(1e6 * remainder)
        if microsecond < 10:
            microsecond = 0  # compensate for rounding errors
        # for some strange reason it is 1 year over the actual date!!
        dt = datetime(dt.year - 1, dt.month, dt.day, int(hour), int(minute),
                      int(second), microsecond)
        if microsecond > 999990:  # compensate for rounding errors
            dt += timedelta(microseconds=1e6 - microsecond)

        return dt

    def BrowseButtonDet(self):
        root = tk.Tk()
        root.withdraw()
        self.SelectedFolder = filedialog.askdirectory()
        self.FolderPathDet.setText(self.SelectedFolder)

    def upload_data(self):
        global CTInfo, CP
        FilesInFolder = os.listdir(self.SelectedFolder)
        AllFile = [s for s in FilesInFolder if "AllCTrains.csv" in s]
        if len(AllFile) > 0:
            FileName = self.SelectedFolder + '/AllCTrains.csv'
            CP = pd.read_csv(FileName)
            CTInfoFileName = self.SelectedFolder + '/AllCTInfo.csv'
            CTInfo = pd.read_csv(CTInfoFileName)
            CTNum = CTInfo.NewCT[0]
            self.update_ct(CTNum, CP, CTInfo)
        else:
            AllCTInfo = pd.DataFrame()
            AllCTrains = pd.DataFrame()
            NewCTNum = 0
            FilesAndFolders = os.listdir(self.SelectedFolder)
            Folders = [s for s in FilesAndFolders if not "." in s]
            for SubFolder in Folders:
                print('Processing subfolder', SubFolder)
                ThisCP = pd.read_csv(self.SelectedFolder + '/' + SubFolder + '/CTrains.csv')
                ThisCTInfo = pd.read_csv(self.SelectedFolder + '/' + SubFolder + '/CTInfo.csv')
                CTInfo = ThisCTInfo[ThisCTInfo.Species != 'Non-NBHF']
                CTInfo.reset_index(inplace=True, drop=True)
                CTInfo['NewCT'] = 0
                if len(CTInfo) > 0:
                    CTrains = pd.DataFrame()
                    for i in range(0, len(CTInfo)):
                        NewCTNum = NewCTNum + 1
                        NumCT = CTInfo.CTNum[i]
                        CTInfo.NewCT[i] = NewCTNum
                        CTInfo['Corr'] = 1
                        CTTemp = ThisCP[ThisCP.CT == NumCT]
                        CTTemp.reset_index(inplace=True, drop=True)
                        CTTemp['NewCT'] = NewCTNum
                        CTrains = CTrains.append(CTTemp, ignore_index=True)
                    AllCTInfo.reset_index(inplace=True, drop=True)
                    AllCTrains.reset_index(inplace=True, drop=True)
                    AllCTInfo = AllCTInfo.append(CTInfo, ignore_index=True)
                    AllCTrains = AllCTrains.append(CTrains, ignore_index=True)

                    CTFileName = self.SelectedFolder + '/AllCTrains.csv'
                    AllCTrains.to_csv(CTFileName, index=False)
                    CTInfoFileName = self.SelectedFolder + '/AllCTInfo.csv'
                    AllCTInfo.to_csv(CTInfoFileName, index=False)

            CTInfo = AllCTInfo
            CP = AllCTrains
            num_ct = 1
            self.update_ct(num_ct, CP, CTInfo)
            print('The data is ready to be validated')

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    app.setStyle("fusion")
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
